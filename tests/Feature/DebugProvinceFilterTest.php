<?php

namespace Tests\Feature;

use Tests\TestCase;
use Illuminate\Support\Facades\DB;

class DebugProvinceFilterTest extends TestCase
{
    public function test_debug_existing_data()
    {
        // Check what's actually in the database
        try {
            $provincesCount = DB::table('provinces')->count();
            $familiesCount = DB::table('families')->count();
            
            echo "\n=== DATABASE STATUS ===\n";
            echo "Total provinces: {$provincesCount}\n";
            echo "Total families: {$familiesCount}\n";
            
            if ($provincesCount > 0) {
                $provinces = DB::table('provinces')->orderBy('id')->limit(5)->get();
                echo "\nFirst 5 provinces:\n";
                foreach ($provinces as $province) {
                    $familyCount = DB::table('families')->where('province_id', $province->id)->count();
                    echo "ID: {$province->id}, Name: {$province->name}, Families: {$familyCount}\n";
                }
                
                // Look specifically for آذربایجان شرقی
                $targetProvince = DB::table('provinces')->where('name', 'آذربایجان شرقی')->first();
                if ($targetProvince) {
                    $familiesInTargetProvince = DB::table('families')->where('province_id', $targetProvince->id)->count();
                    echo "\nTarget province found:\n";
                    echo "ID: {$targetProvince->id}, Name: {$targetProvince->name}, Families: {$familiesInTargetProvince}\n";
                    
                    if ($familiesInTargetProvince > 0) {
                        // Test the exact SQL that would be generated by the filter
                        $testQuery = DB::table('families')
                            ->where('province_id', $targetProvince->id)
                            ->toSql();
                        
                        echo "\nTest query SQL: {$testQuery}\n";
                        echo "Test query bindings: [" . $targetProvince->id . "]\n";
                        
                        // Simulate the applySingleFilter logic
                        $result = DB::table('families')
                            ->where('families.province_id', $targetProvince->id)
                            ->get();
                            
                        echo "applySingleFilter simulation result count: " . count($result) . "\n";
                    }
                } else {
                    echo "\nآذربایجان شرقی province not found\n";
                    
                    // Show all provinces to see what's available
                    $allProvinces = DB::table('provinces')->get();
                    echo "All provinces:\n";
                    foreach ($allProvinces as $province) {
                        echo "- ID: {$province->id}, Name: {$province->name}\n";
                    }
                }
            }
            
            $this->assertTrue(true); // Just to pass the test
            
        } catch (\Exception $e) {
            echo "\nError: " . $e->getMessage() . "\n";
            $this->fail("Database query failed: " . $e->getMessage());
        }
    }
    
    public function test_debug_filter_logic_step_by_step()
    {
        // This test will simulate the exact steps in FamilySearch::applySingleFilter
        try {
            // Step 1: Find the target province
            $province = DB::table('provinces')->where('name', 'آذربایجان شرقی')->first();
            
            if (!$province) {
                $this->markTestSkipped('آذربایجان شرقی province not found');
                return;
            }
            
            // Step 2: Create a filter array similar to what the UI would send
            $filter = [
                'type' => 'province',
                'value' => $province->id,
                'existence_operator' => 'exists',
                'logical_operator' => 'and'
            ];
            
            echo "\n=== FILTER LOGIC DEBUG ===\n";
            echo "Filter configuration: " . json_encode($filter) . "\n";
            
            // Step 3: Simulate the applySingleFilter logic for province
            $queryBuilder = DB::table('families');
            
            // From the applySingleFilter method, for province type with exists operator:
            if ($filter['existence_operator'] === 'exists') {
                if (!empty($filter['value'])) {
                    // This should match: case 'province': if ($operator === 'equals')
                    $queryBuilder = $queryBuilder->where('families.province_id', $filter['value']);
                    echo "Applied filter: WHERE families.province_id = {$filter['value']}\n";
                } else {
                    // Empty value with exists means: has any province
                    $queryBuilder = $queryBuilder->whereNotNull('families.province_id');
                    echo "Applied filter: WHERE families.province_id IS NOT NULL\n";
                }
            } else if ($filter['existence_operator'] === 'not_exists') {
                if (!empty($filter['value'])) {
                    $queryBuilder = $queryBuilder->where('families.province_id', '!=', $filter['value']);
                    echo "Applied filter: WHERE families.province_id != {$filter['value']}\n";
                } else {
                    $queryBuilder = $queryBuilder->whereNull('families.province_id');
                    echo "Applied filter: WHERE families.province_id IS NULL\n";
                }
            }
            
            $sql = $queryBuilder->toSql();
            $bindings = $queryBuilder->getBindings();
            $count = $queryBuilder->count();
            
            echo "Final SQL: {$sql}\n";
            echo "Bindings: " . json_encode($bindings) . "\n";
            echo "Result count: {$count}\n";
            
            // Step 4: Compare with direct query
            $directCount = DB::table('families')->where('province_id', $province->id)->count();
            echo "Direct query count: {$directCount}\n";
            
            if ($count !== $directCount) {
                echo "❌ MISMATCH: Filter logic produced {$count} results, direct query produced {$directCount}\n";
                $this->fail("Filter logic mismatch");
            } else {
                echo "✅ MATCH: Both queries produced {$count} results\n";
            }
            
            $this->assertEquals($directCount, $count);
            
        } catch (\Exception $e) {
            echo "\nError in filter logic test: " . $e->getMessage() . "\n";
            $this->fail("Filter logic test failed: " . $e->getMessage());
        }
    }
}