{{--
راهنمای جامع AI برای پروژه Microbime
هدف: اطمینان از تولید کد سازگار با معماری، استانداردها و محدودیت‌های پروژه.
این فایل توسط Laravel Boost به‌عنوان راهنمای AI بارگذاری می‌شود.
--}}

{{-- اصول بنیادین --}}
- تمام رشته‌های رو-به‌کاربر، توضیحات و مستندات: «فارسی».
- سبک کدنویسی PHP: PSR-12. قالب‌بندی توسط Laravel Pint رعایت شود.
- معماری مبتنی بر SOLID. منطق تجاری در Service/Action ها؛ نه در Model و نه در Livewire Component.
- ترجیح «نا‌متغیر بودن» داده‌ها در محاسبات/تبدیلات (immutability-first).

{{-- پشته فناوری --}}
- Laravel 12, PHP 8.2+, MySQL.
- فرانت‌اند: Livewire v3 + Volt Functional API فقط. از ساخت کنترلرهایی که Blade برمی‌گردانند خودداری شود.
- استایل: فقط TailwindCSS (utility-first). از CSS سفارشی تا حد امکان پرهیز.

{{-- احراز هویت، مجوز و نقش‌ها --}}
- مدیریت نقش/مجوز با: spatie/laravel-permission.
- هرگز if دستی مانند: `if (auth()->user()->role === 'admin')` ننویس.
- استفاده از middleware `->can('permission')`، Blade `@can`، یا `$this->authorize()` داخل متدهای کامپوننت.

{{-- تاریخ و زمان --}}
- منطقه زمانی: Asia/Tehran. locale: fa.
- تمام نمایش/تبدیل تاریخ برای کاربر با پکیج hekmatinasser/verta انجام شود.

{{-- آپلود و مدیریت فایل --}}
- تمام آپلودها و اتصال فایل‌ها به مدل‌ها با spatie/laravel-medialibrary.
- از نوشتن مستقیم در public اجتناب شود مگر سیاست پروژه به‌طور صریح تغییر داده شده باشد.

{{-- عملیات Excel --}}
- Import/Export با maatwebsite/excel.
- این عملیات‌ها باید «صف‌بندی» شوند (Queued Job) تا از timeout جلوگیری شود.

{{-- پرداخت --}}
- یکپارچه‌سازی پرداخت با shetabit/payment.
- خطاهای درگاه با try-catch جزئی مدیریت و لاگ شوند.

{{-- صف و وظایف طولانی --}}
- درایور پیش‌فرض صف: database.
- هر کار زمان‌بر (رتبه‌بندی، گزارش، Excel) «حتماً» Job صف‌بندی‌شده باشد.

{{-- قواعد مدل‌ها (Eloquent) --}}
- اگر همه ویژگی‌ها قابل پر کردن‌اند: `protected $guarded = [];`، در غیر اینصورت از `$fillable` استفاده شود.
- استفاده از Attribute Casts مدرن (Attributes/WithCast در صورت نیاز).
- تمام روابط با «نوع بازگشتی صریح» تعریف شوند.
- برای مجموعه گزینه‌های ثابت از «PHP Enum» استفاده و در مدل cast شود.
- پیشگیری از N+1 با `with()` و `withCount()`.
- برای کوئری‌های پیچیده: scope محلی در مدل‌ها.
- «هرگز» SQL خام ننویس؛ از Eloquent/Query Builder استفاده کن.

{{-- Livewire + Volt --}}
- هر کامپوننت یک مسئولیت مشخص داشته باشد.
- از `#[Computed]` برای داده‌های پرهزینه به همراه caching استفاده کن.
- data-binding با `wire:model` و برای بهبود عملکرد از `.live` یا `.blur` استفاده شود.
- منطق پیچیده را به Service/Action ها واگذار کن.
- از تولید View توسط Controller خودداری کن؛ فقط Volt Component ها در `resources/views/livewire/*.php`.

{{-- روتینگ --}}
- مسیرها در فایل‌های مرسوم (`routes/web.php`, `routes/api.php`).
- گروه‌بندی مسیرها بر اساس middleware (مثلاً: `auth`, `can:permission`).

{{-- اعتبارسنجی، خطا و تراکنش --}}
- «همه» اعتبارسنجی‌های فرم/API باید با Form Request کلاس مجزا انجام شود.
- اعتبارسنجی را داخل متدهای Livewire قرار نده؛ Form Request را type-hint کن.
- برای عملیات مستعد خطا (پرداخت، سرویس ثالث) try-catch جزئی و لاگ مناسب.
- عملیات چند-نوشت (multi-write) داخل `DB::transaction()` برای یکپارچگی داده‌ها.

{{-- تست‌ها --}}
- تست‌ها با Pest PHP.
- برای هر فیچر جدید: Feature Test متناظر، و تست Livewire جهت تغییر پراپرتی‌ها و رفتار اکشن‌ها.

{{-- عملکرد و کش --}}
- از `Cache::remember()` برای داده‌های پرمصرف و تکراری استفاده کن.
- در computedها/سرویس‌ها، TTL مناسب تعیین کن و invalidation را صریح مدیریت کن.

{{-- الگوهای کاربردی پروژه --}}
- نمایش تاریخ‌های کاربر-محور با Verta؛ در فرم‌ها از Jalali Datepicker الگوی موفق استفاده شود (selector: `.jalali-datepicker`, `wire:model.defer`, `readonly`).
- در داشبوردها از eager loading و cache برای جلوگیری از فشار به DB.
- در فایل‌ها/لوگوها از مسیرها و URLهایی که توسط سیستم Storage/MediaLibrary تولید می‌شود استفاده کن.

{{-- نکات مربوط به Boost/MCP --}}
- این راهنما به‌صورت خودکار توسط Laravel Boost بارگذاری می‌شود (پس از `php artisan boost:install`).
- برای استفاده در IDE: MCP Server با فرمان `php ./artisan boost:mcp` ثبت شود.

{{-- نتیجه‌گیری --}}
- هر تغییری باید با اصول بالا سازگار باشد.
- در صورت تعارض، اصول معماری (SOLID، جداسازی Concerns و عدم تکرار منطق) اولویت دارند.
