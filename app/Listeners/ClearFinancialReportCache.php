<?php

namespace App\Listeners;

use App\Helpers\FinancialCacheHelper;
use Illuminate\Support\Facades\Log;

/**
 * Listener Ø¨Ø±Ø§ÛŒ Ù¾Ø§Ú© Ú©Ø±Ø¯Ù† Ú©Ø´ Ú¯Ø²Ø§Ø±Ø´ Ù…Ø§Ù„ÛŒ
 * 
 * Ø§ÛŒÙ† Listener Ø¨Ù‡ ØµÙˆØ±Øª Ø®ÙˆØ¯Ú©Ø§Ø± Ú©Ø´ Ú¯Ø²Ø§Ø±Ø´ Ù…Ø§Ù„ÛŒ Ø±Ø§ Ù¾Ø§Ú© Ù…ÛŒâ€ŒÚ©Ù†Ø¯
 * Ù‡Ù†Ú¯Ø§Ù…ÛŒ Ú©Ù‡ eventâ€ŒÙ‡Ø§ÛŒ Ù…Ø§Ù„ÛŒ Ø±Ø® Ù…ÛŒâ€ŒØ¯Ù‡Ù†Ø¯.
 * 
 * Ù†Ú©ØªÙ‡: Ø¨Ø§ Observerâ€ŒÙ‡Ø§ØŒ Ø¯ÛŒÚ¯Ø± Ù†ÛŒØ§Ø²ÛŒ Ø¨Ù‡ Ø§ÛŒÙ† Listener Ù†ÛŒØ³Øª
 * Ø§Ù…Ø§ Ø¨Ø±Ø§ÛŒ backward compatibility Ù†Ú¯Ù‡ Ø¯Ø§Ø´ØªÙ‡ Ø´Ø¯Ù‡ Ø§Ø³Øª
 */
class ClearFinancialReportCache
{
    protected FinancialCacheHelper $cacheHelper;

    public function __construct(FinancialCacheHelper $cacheHelper = null)
    {
        $this->cacheHelper = $cacheHelper ?? new FinancialCacheHelper();
    }

    /**
     * Handle the event.
     * 
     * Ø§ÛŒÙ† Listener Ø¨Ù‡ ØµÙˆØ±Øª Ø®ÙˆØ¯Ú©Ø§Ø± Ú©Ø´ Ú¯Ø²Ø§Ø±Ø´ Ù…Ø§Ù„ÛŒ Ø±Ø§ Ù¾Ø§Ú© Ù…ÛŒâ€ŒÚ©Ù†Ø¯
     * Ù‡Ù†Ú¯Ø§Ù…ÛŒ Ú©Ù‡ eventâ€ŒÙ‡Ø§ÛŒ Ù…Ø§Ù„ÛŒ Ø±Ø® Ù…ÛŒâ€ŒØ¯Ù‡Ù†Ø¯.
     * 
     * @param mixed $event
     * @return void
     */
    public function handle($event)
    {
        $this->cacheHelper->flush();
        
        Log::info('ðŸ”„ Ú©Ø´ Ú¯Ø²Ø§Ø±Ø´ Ù…Ø§Ù„ÛŒ ØªÙˆØ³Ø· Listener Ù¾Ø§Ú© Ø´Ø¯', [
            'event' => get_class($event),
            'keys_cleared' => count($this->cacheHelper->getAllKeys())
        ]);
    }
}
